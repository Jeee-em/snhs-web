/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Announcement = {
  _id: string;
  _type: "announcement";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  priority?: "low" | "normal" | "high" | "urgent";
  category?: "academic" | "administrative" | "event" | "holiday" | "emergency" | "general";
  excerpt?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  targetAudience?: Array<"all-students" | "grade-7" | "grade-8" | "grade-9" | "grade-10" | "grade-11" | "grade-12" | "parents" | "faculty" | "staff" | "public">;
  publishedAt?: string;
  expiresAt?: string;
  isPinned?: boolean;
  isActive?: boolean;
  attachments?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "file";
    _key: string;
  }>;
  contactInfo?: {
    name?: string;
    email?: string;
    phone?: string;
  };
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  isFeatured?: boolean;
  views?: number;
  publishedAt?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Announcement | Post | Author | Category | BlockContent | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: lib/queries.ts
// Variable: POSTS_QUERY
// Query: *[_type == "post" && defined(slug.current)]|order(publishedAt desc)[0...12]{    _id,    title,    slug,    body,    mainImage,    publishedAt,    isFeatured,    "views": coalesce(views, 0),    "categories": coalesce(        categories[]->{        _id,        slug,        title        },        []    ),    author->{        name,        image    }}
export type POSTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  publishedAt: string | null;
  isFeatured: boolean | null;
  views: number | 0;
  categories: Array<{
    _id: string;
    slug: Slug | null;
    title: string | null;
  }> | Array<never>;
  author: {
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
}>;
// Variable: POSTS_PAGINATED_QUERY
// Query: *[_type == "post" && defined(slug.current)]|order(publishedAt desc)[$start...$end]{    _id,    title,    slug,    body,    mainImage,    publishedAt,    isFeatured,    "views": coalesce(views, 0),    "categories": coalesce(        categories[]->{        _id,        slug,        title        },        []    ),    author->{        name,        image    }}
export type POSTS_PAGINATED_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  publishedAt: string | null;
  isFeatured: boolean | null;
  views: number | 0;
  categories: Array<{
    _id: string;
    slug: Slug | null;
    title: string | null;
  }> | Array<never>;
  author: {
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
}>;
// Variable: POSTS_BY_CATEGORY_PAGINATED_QUERY
// Query: *[_type == "post" && defined(slug.current) && $categoryTitle in categories[]->title]|order(publishedAt desc)[$start...$end]{    _id,    title,    slug,    body,    mainImage,    publishedAt,    isFeatured,    views,    "categories": coalesce(        categories[]->{        _id,        slug,        title        },        []    ),    author->{        name,        image    }}
export type POSTS_BY_CATEGORY_PAGINATED_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  publishedAt: string | null;
  isFeatured: boolean | null;
  views: number | null;
  categories: Array<{
    _id: string;
    slug: Slug | null;
    title: string | null;
  }> | Array<never>;
  author: {
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
}>;
// Variable: POSTS_COUNT_QUERY
// Query: count(*[_type == "post" && defined(slug.current)])
export type POSTS_COUNT_QUERYResult = number;
// Variable: POSTS_BY_CATEGORY_COUNT_QUERY
// Query: count(*[_type == "post" && defined(slug.current) && $categoryTitle in categories[]->title])
export type POSTS_BY_CATEGORY_COUNT_QUERYResult = number;
// Variable: POPULAR_POSTS_QUERY
// Query: *[_type == "post" && defined(slug.current)]|order(coalesce(views, 0) desc, publishedAt desc)[$start...$end]{    _id,    title,    slug,    body,    mainImage,    publishedAt,    isFeatured,    "views": coalesce(views, 0),    "categories": coalesce(        categories[]->{        _id,        slug,        title        },        []    ),    author->{        name,        image    }}
export type POPULAR_POSTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  publishedAt: string | null;
  isFeatured: boolean | null;
  views: number | 0;
  categories: Array<{
    _id: string;
    slug: Slug | null;
    title: string | null;
  }> | Array<never>;
  author: {
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
}>;
// Variable: POPULAR_POSTS_BY_CATEGORY_QUERY
// Query: *[_type == "post" && defined(slug.current) && $categoryTitle in categories[]->title]|order(coalesce(views, 0) desc, publishedAt desc)[$start...$end]{    _id,    title,    slug,    body,    mainImage,    publishedAt,    isFeatured,    "views": coalesce(views, 0),    "categories": coalesce(        categories[]->{        _id,        slug,        title        },        []    ),    author->{        name,        image    }}
export type POPULAR_POSTS_BY_CATEGORY_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  publishedAt: string | null;
  isFeatured: boolean | null;
  views: number | 0;
  categories: Array<{
    _id: string;
    slug: Slug | null;
    title: string | null;
  }> | Array<never>;
  author: {
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
}>;
// Variable: POPULAR_POSTS_COUNT_QUERY
// Query: count(*[_type == "post" && defined(slug.current)])
export type POPULAR_POSTS_COUNT_QUERYResult = number;
// Variable: POPULAR_POSTS_BY_CATEGORY_COUNT_QUERY
// Query: count(*[_type == "post" && defined(slug.current) && $categoryTitle in categories[]->title])
export type POPULAR_POSTS_BY_CATEGORY_COUNT_QUERYResult = number;
// Variable: POSTS_BY_CATEGORY_QUERY
// Query: *[_type == "post" && defined(slug.current) && $categoryTitle in categories[]->title]|order(publishedAt desc)[0...12]{    _id,    title,    slug,    body,    mainImage,    publishedAt,    isFeatured,    views,    "categories": coalesce(        categories[]->{        _id,        slug,        title        },        []    ),    author->{        name,        image    }}
export type POSTS_BY_CATEGORY_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  publishedAt: string | null;
  isFeatured: boolean | null;
  views: number | null;
  categories: Array<{
    _id: string;
    slug: Slug | null;
    title: string | null;
  }> | Array<never>;
  author: {
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
}>;
// Variable: FEATURED_POST_QUERY
// Query: *[_type == "post" && defined(slug.current) && isFeatured == true]|order(publishedAt desc)[0]{    _id,    title,    slug,    body,    mainImage,    publishedAt,    isFeatured,    views,    "categories": coalesce(        categories[]->{        _id,        slug,        title        },        []    ),    author->{        name,        image    }}
export type FEATURED_POST_QUERYResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  publishedAt: string | null;
  isFeatured: boolean | null;
  views: number | null;
  categories: Array<{
    _id: string;
    slug: Slug | null;
    title: string | null;
  }> | Array<never>;
  author: {
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
} | null;
// Variable: CATEGORIES_QUERY
// Query: *[_type == "category"]|order(title asc){    _id,    title,    slug,    "postCount": count(*[_type == "post" && references(^._id)])}
export type CATEGORIES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  postCount: number;
}>;
// Variable: ALL_POSTS_WITH_CATEGORIES_QUERY
// Query: *[_type == "post" && defined(slug.current)]|order(publishedAt desc)[0...50]{    _id,    title,    slug,    "categories": coalesce(        categories[]->{        _id,        slug,        title        },        []    )}
export type ALL_POSTS_WITH_CATEGORIES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  categories: Array<{
    _id: string;
    slug: Slug | null;
    title: string | null;
  }> | Array<never>;
}>;
// Variable: POSTS_SLUGS_QUERY
// Query: *[_type == "post" && defined(slug.current)]{     "slug": slug.current}
export type POSTS_SLUGS_QUERYResult = Array<{
  slug: string | null;
}>;
// Variable: POST_QUERY
// Query: *[_type == "post" && slug.current == $slug][0]{    _id,    title,    body,    mainImage,    publishedAt,    isFeatured,    views,    "categories": coalesce(        categories[]->{        _id,        slug,        title        },        []    ),    author->{        name,        image    }}
export type POST_QUERYResult = {
  _id: string;
  title: string | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  publishedAt: string | null;
  isFeatured: boolean | null;
  views: number | null;
  categories: Array<{
    _id: string;
    slug: Slug | null;
    title: string | null;
  }> | Array<never>;
  author: {
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
} | null;
// Variable: HIGHLIGHT_POSTS_QUERY
// Query: *[_type == "post" && defined(slug.current)]|order(publishedAt desc)[0...4]{    _id,    title,    slug,    body,    mainImage,    publishedAt,    isFeatured,    views,    "categories": coalesce(        categories[]->{        _id,        slug,        title        },        []    ),    author->{        name,        image    }}
export type HIGHLIGHT_POSTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  publishedAt: string | null;
  isFeatured: boolean | null;
  views: number | null;
  categories: Array<{
    _id: string;
    slug: Slug | null;
    title: string | null;
  }> | Array<never>;
  author: {
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
}>;
// Variable: ANNOUNCEMENTS_QUERY
// Query: *[_type == "announcement" && isActive == true && (!defined(expiresAt) || expiresAt > now())]|order(isPinned desc, priority desc, publishedAt desc)[0...6]{    _id,    title,    slug,    excerpt,    priority,    category,    publishedAt,    isPinned,    targetAudience,    contactInfo}
export type ANNOUNCEMENTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  excerpt: string | null;
  priority: "high" | "low" | "normal" | "urgent" | null;
  category: "academic" | "administrative" | "emergency" | "event" | "general" | "holiday" | null;
  publishedAt: string | null;
  isPinned: boolean | null;
  targetAudience: Array<"all-students" | "faculty" | "grade-10" | "grade-11" | "grade-12" | "grade-7" | "grade-8" | "grade-9" | "parents" | "public" | "staff"> | null;
  contactInfo: {
    name?: string;
    email?: string;
    phone?: string;
  } | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"post\" && defined(slug.current)]|order(publishedAt desc)[0...12]{\n    _id,\n    title,\n    slug,\n    body,\n    mainImage,\n    publishedAt,\n    isFeatured,\n    \"views\": coalesce(views, 0),\n    \"categories\": coalesce(\n        categories[]->{\n        _id,\n        slug,\n        title\n        },\n        []\n    ),\n    author->{\n        name,\n        image\n    }\n}": POSTS_QUERYResult;
    "*[_type == \"post\" && defined(slug.current)]|order(publishedAt desc)[$start...$end]{\n    _id,\n    title,\n    slug,\n    body,\n    mainImage,\n    publishedAt,\n    isFeatured,\n    \"views\": coalesce(views, 0),\n    \"categories\": coalesce(\n        categories[]->{\n        _id,\n        slug,\n        title\n        },\n        []\n    ),\n    author->{\n        name,\n        image\n    }\n}": POSTS_PAGINATED_QUERYResult;
    "*[_type == \"post\" && defined(slug.current) && $categoryTitle in categories[]->title]|order(publishedAt desc)[$start...$end]{\n    _id,\n    title,\n    slug,\n    body,\n    mainImage,\n    publishedAt,\n    isFeatured,\n    views,\n    \"categories\": coalesce(\n        categories[]->{\n        _id,\n        slug,\n        title\n        },\n        []\n    ),\n    author->{\n        name,\n        image\n    }\n}": POSTS_BY_CATEGORY_PAGINATED_QUERYResult;
    "count(*[_type == \"post\" && defined(slug.current)])": POSTS_COUNT_QUERYResult | POPULAR_POSTS_COUNT_QUERYResult;
    "count(*[_type == \"post\" && defined(slug.current) && $categoryTitle in categories[]->title])": POSTS_BY_CATEGORY_COUNT_QUERYResult | POPULAR_POSTS_BY_CATEGORY_COUNT_QUERYResult;
    "*[_type == \"post\" && defined(slug.current)]|order(coalesce(views, 0) desc, publishedAt desc)[$start...$end]{\n    _id,\n    title,\n    slug,\n    body,\n    mainImage,\n    publishedAt,\n    isFeatured,\n    \"views\": coalesce(views, 0),\n    \"categories\": coalesce(\n        categories[]->{\n        _id,\n        slug,\n        title\n        },\n        []\n    ),\n    author->{\n        name,\n        image\n    }\n}": POPULAR_POSTS_QUERYResult;
    "*[_type == \"post\" && defined(slug.current) && $categoryTitle in categories[]->title]|order(coalesce(views, 0) desc, publishedAt desc)[$start...$end]{\n    _id,\n    title,\n    slug,\n    body,\n    mainImage,\n    publishedAt,\n    isFeatured,\n    \"views\": coalesce(views, 0),\n    \"categories\": coalesce(\n        categories[]->{\n        _id,\n        slug,\n        title\n        },\n        []\n    ),\n    author->{\n        name,\n        image\n    }\n}": POPULAR_POSTS_BY_CATEGORY_QUERYResult;
    "*[_type == \"post\" && defined(slug.current) && $categoryTitle in categories[]->title]|order(publishedAt desc)[0...12]{\n    _id,\n    title,\n    slug,\n    body,\n    mainImage,\n    publishedAt,\n    isFeatured,\n    views,\n    \"categories\": coalesce(\n        categories[]->{\n        _id,\n        slug,\n        title\n        },\n        []\n    ),\n    author->{\n        name,\n        image\n    }\n}": POSTS_BY_CATEGORY_QUERYResult;
    "*[_type == \"post\" && defined(slug.current) && isFeatured == true]|order(publishedAt desc)[0]{\n    _id,\n    title,\n    slug,\n    body,\n    mainImage,\n    publishedAt,\n    isFeatured,\n    views,\n    \"categories\": coalesce(\n        categories[]->{\n        _id,\n        slug,\n        title\n        },\n        []\n    ),\n    author->{\n        name,\n        image\n    }\n}": FEATURED_POST_QUERYResult;
    "*[_type == \"category\"]|order(title asc){\n    _id,\n    title,\n    slug,\n    \"postCount\": count(*[_type == \"post\" && references(^._id)])\n}": CATEGORIES_QUERYResult;
    "*[_type == \"post\" && defined(slug.current)]|order(publishedAt desc)[0...50]{\n    _id,\n    title,\n    slug,\n    \"categories\": coalesce(\n        categories[]->{\n        _id,\n        slug,\n        title\n        },\n        []\n    )\n}": ALL_POSTS_WITH_CATEGORIES_QUERYResult;
    "*[_type == \"post\" && defined(slug.current)]{ \n    \"slug\": slug.current\n}": POSTS_SLUGS_QUERYResult;
    "*[_type == \"post\" && slug.current == $slug][0]{\n    _id,\n    title,\n    body,\n    mainImage,\n    publishedAt,\n    isFeatured,\n    views,\n    \"categories\": coalesce(\n        categories[]->{\n        _id,\n        slug,\n        title\n        },\n        []\n    ),\n    author->{\n        name,\n        image\n    }\n}": POST_QUERYResult;
    "*[_type == \"post\" && defined(slug.current)]|order(publishedAt desc)[0...4]{\n    _id,\n    title,\n    slug,\n    body,\n    mainImage,\n    publishedAt,\n    isFeatured,\n    views,\n    \"categories\": coalesce(\n        categories[]->{\n        _id,\n        slug,\n        title\n        },\n        []\n    ),\n    author->{\n        name,\n        image\n    }\n}": HIGHLIGHT_POSTS_QUERYResult;
    "*[_type == \"announcement\" && isActive == true && (!defined(expiresAt) || expiresAt > now())]|order(isPinned desc, priority desc, publishedAt desc)[0...6]{\n    _id,\n    title,\n    slug,\n    excerpt,\n    priority,\n    category,\n    publishedAt,\n    isPinned,\n    targetAudience,\n    contactInfo\n}": ANNOUNCEMENTS_QUERYResult;
  }
}
